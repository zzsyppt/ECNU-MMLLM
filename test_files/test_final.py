import transformers
import torch
import numpy as np
model_id = "/home/pod/shared-nvme/ECNU_MMLLM/llama"

pipeline = transformers.pipeline(
    "text-generation",
    model=model_id,
    model_kwargs={"torch_dtype": torch.bfloat16},
    device="cuda",
)

sys_prompt = """
扮演一位心理咨询师，根据用户传入的心率变异性（HRV）指标（RMSSD、SDNN、pNN50 和 SN）以及心率数据来推测用户的心理状态。以下是这四个指标的定义、正常范围及其在心理健康评估中的意义，请结合这些信息进行分析和推理。\n

1. **RMSSD（均方根差）**：衡量短期心率变异性，主要反映副交感神经（迷走神经）活动水平。正常值为15-39，过低的 RMSSD 表示用户压力较大或情绪波动较大，过高表示用户很轻松放松。\n

2. **SDNN（NN间隔标准差）**：反映总体心率变异性，受到交感和副交感神经活动的影响。正常值为102-180，过低的SDNN可能提示个体处于高压力状态或心理负担较大，过高表示用户很轻松放松。\n

3. **pNN50**：表示相邻心跳间隔差值大于 50 毫秒的比例。健康人群的 pNN50 值一般在 2% 到 30% 之间，较高的 pNN50 表明情绪稳定、压力较低，而较低的 pNN50 可能提示用户情绪不稳或处于紧张状态。\n

4. **SN（交感神经活动指数）**：衡量交感神经系统的活跃程度。SN 值低于 10 表明用户处于放松状态，超过 20 用户则可能压力或焦虑。\n

### 请综合以上指标数值和心率数据推测用户的下列心理指标。\n

请返回一个只包含以下键值对的 JSON 对象，不需要任何其他文字：\n
1. "RMSSD": 原封不动放置 RMSSD 的值。\n
2. "SDNN": 原封不动放置 SDNN 的值。\n
3. "pNN50": 原封不动放置 pNN50 的值。\n
4. "SN": 原封不动放置 SN 的值。\n
5. "心情状态": 用一个词描述用户的心情状态。\n
6. "心情颜色": 能代表用户心情状态的颜色的编码（非文字）。\n
7. "总能量星级": 用户的整体能量评级，介于 1 到 5。\n
8. "放松度星级": 用户的放松程度评级，介于 1 到 5。\n
9. "压力指数星级": 用户的压力水平评级，介于 1 到 5。\n
10. "情绪稳定性星级": 用户的情绪稳定性评级，介于 1 到 5。\n
11. "心理弹性星级": 用户的心理弹性评级，介于 1 到 5。\n
12. "身心和谐度星级": 用户的身心和谐程度评级，介于 1 到 5。\n
13. "综合得分": 用户的综合得分，介于 1 到 5。\n
14. "焦虑指数": 用户的焦虑水平评级，介于 1 到 5。\n
15. "疲劳指数": 用户的疲劳水平评级，介于 1 到 5。\n
16. "建议": 根据你所分析的用户心情状态，给出一些调整状态的建议。\n

请严格遵循格式，返回的必须是json对象，不要添加任何其他内容。我再次强调：必须返回含大括号的json对象。\n
"""

series = '76,76,76,74,72,72,72,72,72,78,84,84,82,82,80,78,78,78,78,76,76,76,76,76,70,70,72,72,76,78,78,76,76,76,70,68,68,68,68,72,72,70,70,68,68,68,68,68,68,70,70,70,70,70,70,70,68,68,68,70,72,74,74,74,74,72,72,72,70,68,68,68,68,70,72,72,74,68,68,66,66,66,72,74,76,76,76,74,74,74,74,72,72,70,68,70,70,70,70,70,70,70,70,70,70,70,66,68,68,68,68,70,70,68,68,66,66,70,70,70,74,77,77,78,80,80,80,80,80,74,74,70,70,70,70,68,68,70,70,71,71,77,80,80,80,78,78,76,76,72,72,72,72,70,68,70,72,76,80,80,80,80,80,80,80,78,78,74,74,71,68,67,65,65,65,65,69,69,76,76,74,74,74,72,72,72,70,68,68,66,66,66,68,68,70,70,72,72,74,74,74,74,74,72,70,70,66,66,66,66,66,66,66,70,72,74,74,72,72,72,72,74,74,72,70,70,70,72,72,72,72,72,70,72,70,72,72,74,78,80,80,80,80,78,76,76,76,76,76,72,72,66,66,66,66,63,63,61,61,61,61,68,68,66,64,63,61,61,61,61,61,63,63,63,63,68,70,70,66,63,61,61,61,61,61,61,61,66,66,66,66,63,63,63,59,59,59,59,59,59,59,59,59,59,59,61,61,61,61,63,63,63,63,64,66,66,64,63,61,61,61,59,59,59,59,59,61,61,64,64,64,64,61,59,59,59,59,59,59,59,59,57,57,57,57,63,68,68,70,70,70,71,74,74,77,78,78,76,72,72,72,64,64,64,64,66,68,70,70,72,68,68,68,68,63,64,66,66,66,66,70,70,70,70,63,59,59,59,63,63,64,64,64,63,63,63,63,63,63,61,61,61,61,61,63,63,63,61,61,61,61,61,61,63,64,64,66,64,63,63,61,59,59,59,59,59,59,59,59,59,59,59,59,61,61,61,61,63,63,70,70,74,74,72,72,68,72,72,72,70,70,70,61,59,59,59,59,61,63,63,63,63,61,61,61,61,61,61,61,61,61,61,66,63,63,63,63,63,65,65,68,74,74,80,77,77,71,68,66,66,64,64,59,59,59,59,61,61,61,63,63,64,61,61,61,63,63,64,64,66,66,64,64,64,61,60,60,60,60,60,57,57,59,59,59,59,59,59,59,59,59,61,61,61,61,61,61,64,64,64,63,63,61,57,57,63,66,63,63,60,60,60,60,60,60,59,59,63,64,64,64,63,61,61,59,59,59,59,59,59,59,57,57,59,59,59,59,59,59,59,61,59,59,59,61,61,63,63,63,66,66,64,63,61,61,57,57,57,57,57,57,57,57,57,57,59,59,59,59,59,59,59,59,59,59,63,63,61,59,61,63,63,64,63,63,61,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,61,61,61,61,63,63,63,63,61,61,61,61,61,63,63,63,63,63,61,61,61,61,61,61,61,59,59,59,57,57,59,59,59,61,61,61,61,61,61,61,61,61,61,59,61,61,61,61,61,61,61,61,59,59,59,59,59,59,59,59,57,57,59,59,61,61,61,59,59,59,57,59,62,63,60,60,60,71,74,77,80,80,80,80,74,66,64,63,61,61,61,61,61,61,63,63,63,63,63,70,74,74,68,68,63,63,61,61,59,59,59,59,64,66,66,66,66,66,70,69,70,70,70,70,70,70,70,70,60,60,60,60,60,60,57,57,57,59,61,63,66,70,72,75,75,75,69,69,68,65,62,62,60,60,60,60,60,60,60,60,61,63,63,64,63,61,59,57,57,57,57,57,57,57,57,57,57,57,57,57,63,63,64,64,61,57,57,55,55,57,59,59,61,61,61,59,59,59,59,59,59,61,61,68,68,64,63,61,59,59,59,57,57,57,57,59,59,57,57,59,61,61,63,63,63,59,59,59,59,59,59,59,59,59,59,59,59,57,57,59,61,63,63,63,63,64,64,72,72,78,78,78,78,78,72,72,64,63,61,61,61,63,63,64,64,64,64,66,66,66,63,64,68,68,72,72,72,72,72,63,60,60,60,60,60,63,64,66,66,68,68,68,68,68,68,70,70,72,74,76,76,74,74,74,74,74,60,60,60,60,61,64,68,70,70,70,63,59,59,57,57,57,57,57,57,57,57,59,59,59,59,59,59,59,66,66,66,60,60,60,60,60,61,68,68,68,68,80,80,82,82,84,84,84,80,80,80,74,72,72,70,68,68,63,63,61,61,61,61,64,64,64,61,61,61,63,63,63,61,61,61,61,66,70,72,69,69,69,66,66,64,64,64,64,66,66,66,65,67,67,67,63,63,63,64,64,65,64,64,64,78,78,78,78,76,76,76,76,76,76,78,78,78,76,76,76,74,72,72,70,70,66,63,61,61,61,61,61,61,61,63,63,63,68,74,76,76,78,76,78,78,78,78,74,72,74,74,74,74,72,70,70,70,63,63,63,61,61,61,63,63,64,64,64,61,61,61,61,61,61,59,59,59,64,64,68,70,70,70,74,74,74,74,72,72,72,74,74,72,72,72,72,66,64,64,64,63,63,63,63,63,63,63,64,66,66,72,72,72,72,74,74,74,74,74,74,74,70,70,70,61,61,57,57,57,57,57,59,59,59,55,51,51,60,62,65,65,70,70,72,74,74,76,76,74,74,72,66,63,60,60,60,61,61,61,66,68,68,68,66,63,61,61,61,61,61,61,61,72,76,76'
heart_rates = np.array([int(x) for x in series.split(",")])

# 将心率数据转换为 R-R 间隔（毫秒）
rr_intervals = 60000 / heart_rates  # R-R 间隔（以毫秒为单位）

# 计算 RMSSD
def calculate_rmssd(rr_intervals):
    diff_rr = np.diff(rr_intervals)  # 相邻 R-R 间隔的差
    rmssd = np.sqrt(np.mean(diff_rr**2))  # 差值的均方根
    return rmssd

# 计算 SDNN
def calculate_sdnn(rr_intervals):
    sdnn = np.std(rr_intervals)  # R-R 间隔的标准差
    return sdnn

# 计算 pNN50
def calculate_pnn50(rr_intervals):
    diff_rr = np.diff(rr_intervals)
    nn50 = np.sum(np.abs(diff_rr) > 50)  # 计算相邻间隔差值超过 50 ms 的次数
    pnn50 = (nn50 / len(diff_rr)) * 100  # 超过 50 ms 的差值比例
    return pnn50

# 计算 SN (Sympathetic Nervous Activity Index)
def calculate_sn(rr_intervals):
    sn = np.mean(rr_intervals) / np.std(rr_intervals)  # 平均值与标准差之比
    return sn

# 计算结果
rmssd = calculate_rmssd(rr_intervals)
sdnn = calculate_sdnn(rr_intervals)
pnn50 = calculate_pnn50(rr_intervals)
sn = calculate_sn(rr_intervals)

usr_prompt = f"""
这是我的心率变异性数据以及心率数据：\n
1. "RMSSD": {rmssd}\n
2. "SDNN": {sdnn}\n
3. "pNN50": {pnn50}\n
4. "SN": {sn}\n
5. "原始心率数据": {series}
"""
messages = [
    {"role": "system", "content": sys_prompt},
    {"role": "user", "content": usr_prompt},
]

prompt = pipeline.tokenizer.apply_chat_template(
		messages, 
		tokenize=False, 
		add_generation_prompt=True
)

terminators = [
    pipeline.tokenizer.eos_token_id,
    pipeline.tokenizer.convert_tokens_to_ids("<|eot_id|>")
]

outputs = pipeline(
    prompt,
    max_new_tokens=256,
    eos_token_id=terminators,
    do_sample=True,
    temperature=0.6,
    top_p=0.9,
)
print(outputs[0]["generated_text"][len(prompt):])